// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  onboarded     Boolean   @default(false)
  accounts      Account[]
  sessions      Session[]
  shiftTypes    ShiftType[]
  assignments   ShiftAssignment[]
}

model ShiftType {
  id                       String              @id @default(cuid())
  name                     String
  hours                    Int
  user                     User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                   String
  assignments              ShiftAssignment[]
  originalShiftAssignments ShiftAssignment[]   @relation("OriginalShift")

  @@unique([userId, name])
}

model ShiftAssignment {
  id                  String     @id @default(cuid())
  date                DateTime   @db.Date
  user                User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId              String
  shiftType           ShiftType  @relation(fields: [shiftTypeId], references: [id], onDelete: Cascade)
  shiftTypeId         String
  originalShiftType   ShiftType? @relation("OriginalShift", fields: [originalShiftTypeId], references: [id], onDelete: SetNull)
  originalShiftTypeId String?
  observations        String?

  @@unique([userId, date])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
